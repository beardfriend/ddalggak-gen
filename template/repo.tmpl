package {{.SchemaName}}

import (
    "{{.ModuleName}}/ent"
    "{{.ModuleName}}/ent/{{.SchemaName}}"
    "context"
    "entgo.io/ent/dialect/sql"
)

type Repo interface {
    Create(ctx context.Context, b *ent.{{.CamelSchemaName}}) error
    Get(ctx context.Context, id {{.FieldNameType.ID }}) (*ent.{{.CamelSchemaName}}, error)
    Update(ctx context.Context, b *ent.{{.CamelSchemaName}}) (err error)
    Delete(ctx context.Context, id {{.FieldNameType.ID }}) (err error)
    List(ctx context.Context, p *ListParams) ([]*ent.{{.CamelSchemaName}}, error)
    Total(ctx context.Context, p *ListParams) (int, error)
}

type repo struct {
    db *ent.Client
}

func NewRepo(db *ent.Client) Repo {
    return &repo{db: db}
}

func (r *repo) Create(ctx context.Context, b *ent.{{.CamelSchemaName}}) (err error) {
    err = r.db.{{.CamelSchemaName}}.Create().
{{- range .Fields }}
    {{- if .IsDefaultGeneratedColumn }}
         {{- continue }}
    {{- end }}
    {{- if .IsOptional }}
        SetNillable{{.Name}}(b.{{.Name}}).
        {{- else }}
        Set{{.Name}}(b.{{.Name}}).
    {{- end }}
{{- end }}
        Exec(ctx)
    return 
}

func (r *repo) Get(ctx context.Context, id {{.FieldNameType.ID }}) (*ent.{{.CamelSchemaName}}, error) {
    return r.db.{{.CamelSchemaName}}.Get(ctx, id)
}

func (r *repo) Update(ctx context.Context, b *ent.{{.CamelSchemaName}}) (err error) {
    err = r.db.{{.CamelSchemaName}}.UpdateOne(b).
{{- range .Fields }}
    {{- if .IsDefaultGeneratedColumn }}
        {{- continue }}
    {{- end }}

    {{- if .Name | eq "ID" }}
        {{- continue }}
    {{- end }}

    {{- if .IsOptional }}
        SetNillable{{.Name}}(b.{{.Name}}).
        {{- else }}
        Set{{.Name}}(b.{{.Name}}).
    {{- end }}
{{- end }}
        Exec(ctx)
    return 
}

func (r *repo) Delete(ctx context.Context, id {{.FieldNameType.ID }}) (err error) {
    err = r.db.{{.CamelSchemaName}}.DeleteOneID(id).Exec(ctx)
    return 
}


type ListParams struct {
    Limit int
    Offset int
    OrderFieldName string
    OrderIsDesc bool
}

func (r *repo) List(ctx context.Context, p *ListParams) ([]*ent.{{.CamelSchemaName}}, error) {
    q := r.db.{{.CamelSchemaName}}.
        Query().
        Limit(p.Limit).
        Offset(p.Offset)

    if p.OrderFieldName == "" {
		p.OrderFieldName = {{.SchemaName}}.FieldUpdatedAt
	}

	q.Order(func(s *sql.Selector) {
		name := sql.Asc(p.OrderFieldName)
		if p.OrderIsDesc {
			name = sql.Desc(p.OrderFieldName)
		}
		s.OrderBy(name)
	})

    return q.All(ctx)
}

func (r *repo) Total(ctx context.Context, p *ListParams) (int, error) {
    return r.db.{{.CamelSchemaName}}.Query().Count(ctx)
}


{{- $parent := . }}

{{- range .Fields }}
    {{- if and (not (eq .Name "UserID")) (not .IsRelationID) }}
        {{- continue }}
    {{- end }}

// func by userID

func (r *repo) GetByUserID(ctx context.Context, id {{$parent.FieldNameType.ID }}, userID {{$parent.FieldNameType.UserID }}) (*ent.{{$parent.CamelSchemaName}}, error) {
    return r.db.{{$parent.CamelSchemaName}}.Query().Where(
        {{$parent.SchemaName}}.And(
            {{$parent.SchemaName}}.IDEQ(id),
            {{$parent.SchemaName}}.UserIDEQ(userID),
        ),
    ).Only(ctx)
}

func (r *repo) DeleteOneByUserID(ctx context.Context, id {{$parent.FieldNameType.ID }}, userID {{$parent.FieldNameType.UserID }}) (err error) {
    _, err = r.db.{{$parent.CamelSchemaName}}.Delete().Where(
        {{$parent.SchemaName}}.And(
            {{$parent.SchemaName}}.IDEQ(id),
            {{$parent.SchemaName}}.UserIDEQ(userID),
        ),
    ).Exec(ctx)
    return 
}

func (r *repo) UpdateOneByUserID(ctx context.Context, b *ent.{{$parent.CamelSchemaName}}) (err error) {
    err = r.db.{{$parent.CamelSchemaName}}.Update().
{{- range $parent.Fields }}
    {{- if .IsDefaultGeneratedColumn }}
        {{- continue }}
    {{- end }}

    {{- if .Name | eq "ID" }}
        {{- continue }}
    {{- end }}

    {{- if .Name | eq "UserID" }}
        {{- continue }}
    {{- end }}

    {{- if .IsOptional }}
        SetNillable{{.Name}}(b.{{.Name}}).
        {{- else }}
        Set{{.Name}}(b.{{.Name}}).
    {{- end }}
{{- end }}
    Where(
        {{$parent.SchemaName}}.And(
            {{$parent.SchemaName}}.IDEQ(b.ID),
            {{$parent.SchemaName}}.UserIDEQ(b.UserID),
        ),
    ).Exec(ctx)
    return 
}


func (r *repo) TotalByUserID(ctx context.Context, userID {{$parent.FieldNameType.UserID }}) (int, error) {
    return r.db.{{$parent.CamelSchemaName}}.
        Query().
        Where({{$parent.SchemaName}}.UserIDEQ(userID)).
        Count(ctx)
}

func (r *repo) ListByUserID(ctx context.Context, userID {{$parent.FieldNameType.UserID }}, p *ListParams) ([]*ent.{{$parent.CamelSchemaName}}, error) { 
    q := r.db.{{$parent.CamelSchemaName}}.
        Query().
        Limit(p.Limit).
        Offset(p.Offset)

    if p.OrderFieldName == "" {
		p.OrderFieldName = {{$parent.SchemaName}}.FieldUpdatedAt
	}

	q.Order(func(s *sql.Selector) {
		name := sql.Asc(p.OrderFieldName)
		if p.OrderIsDesc {
			name = sql.Desc(p.OrderFieldName)
		}
		s.OrderBy(name)
	})

    return q.Where({{$parent.SchemaName}}.UserIDEQ(userID)).All(ctx)
}

{{- end }}
